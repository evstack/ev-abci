// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evabci/network/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryAttestationBitmapRequest is the request type for the Query/AttestationBitmap RPC method.
type QueryAttestationBitmapRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryAttestationBitmapRequest) Reset()         { *m = QueryAttestationBitmapRequest{} }
func (m *QueryAttestationBitmapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationBitmapRequest) ProtoMessage()    {}
func (*QueryAttestationBitmapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{2}
}
func (m *QueryAttestationBitmapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationBitmapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationBitmapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationBitmapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationBitmapRequest.Merge(m, src)
}
func (m *QueryAttestationBitmapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationBitmapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationBitmapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationBitmapRequest proto.InternalMessageInfo

func (m *QueryAttestationBitmapRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryAttestationBitmapResponse is the response type for the Query/AttestationBitmap RPC method.
type QueryAttestationBitmapResponse struct {
	Bitmap *AttestationBitmap `protobuf:"bytes,1,opt,name=bitmap,proto3" json:"bitmap,omitempty"`
}

func (m *QueryAttestationBitmapResponse) Reset()         { *m = QueryAttestationBitmapResponse{} }
func (m *QueryAttestationBitmapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationBitmapResponse) ProtoMessage()    {}
func (*QueryAttestationBitmapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{3}
}
func (m *QueryAttestationBitmapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationBitmapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationBitmapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationBitmapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationBitmapResponse.Merge(m, src)
}
func (m *QueryAttestationBitmapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationBitmapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationBitmapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationBitmapResponse proto.InternalMessageInfo

func (m *QueryAttestationBitmapResponse) GetBitmap() *AttestationBitmap {
	if m != nil {
		return m.Bitmap
	}
	return nil
}

// QueryEpochInfoRequest is the request type for the Query/EpochInfo RPC method.
type QueryEpochInfoRequest struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *QueryEpochInfoRequest) Reset()         { *m = QueryEpochInfoRequest{} }
func (m *QueryEpochInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEpochInfoRequest) ProtoMessage()    {}
func (*QueryEpochInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{4}
}
func (m *QueryEpochInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochInfoRequest.Merge(m, src)
}
func (m *QueryEpochInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochInfoRequest proto.InternalMessageInfo

func (m *QueryEpochInfoRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// QueryEpochInfoResponse is the response type for the Query/EpochInfo RPC method.
type QueryEpochInfoResponse struct {
	Epoch                   uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StartHeight             int64  `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight               int64  `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	ParticipationBitmap     []byte `protobuf:"bytes,4,opt,name=participation_bitmap,json=participationBitmap,proto3" json:"participation_bitmap,omitempty"`
	ActiveValidators        uint64 `protobuf:"varint,5,opt,name=active_validators,json=activeValidators,proto3" json:"active_validators,omitempty"`
	ParticipatingValidators uint64 `protobuf:"varint,6,opt,name=participating_validators,json=participatingValidators,proto3" json:"participating_validators,omitempty"`
}

func (m *QueryEpochInfoResponse) Reset()         { *m = QueryEpochInfoResponse{} }
func (m *QueryEpochInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEpochInfoResponse) ProtoMessage()    {}
func (*QueryEpochInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{5}
}
func (m *QueryEpochInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochInfoResponse.Merge(m, src)
}
func (m *QueryEpochInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochInfoResponse proto.InternalMessageInfo

func (m *QueryEpochInfoResponse) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryEpochInfoResponse) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *QueryEpochInfoResponse) GetEndHeight() int64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func (m *QueryEpochInfoResponse) GetParticipationBitmap() []byte {
	if m != nil {
		return m.ParticipationBitmap
	}
	return nil
}

func (m *QueryEpochInfoResponse) GetActiveValidators() uint64 {
	if m != nil {
		return m.ActiveValidators
	}
	return 0
}

func (m *QueryEpochInfoResponse) GetParticipatingValidators() uint64 {
	if m != nil {
		return m.ParticipatingValidators
	}
	return 0
}

// QueryValidatorIndexRequest is the request type for the Query/ValidatorIndex RPC method.
type QueryValidatorIndexRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryValidatorIndexRequest) Reset()         { *m = QueryValidatorIndexRequest{} }
func (m *QueryValidatorIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorIndexRequest) ProtoMessage()    {}
func (*QueryValidatorIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{6}
}
func (m *QueryValidatorIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorIndexRequest.Merge(m, src)
}
func (m *QueryValidatorIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorIndexRequest proto.InternalMessageInfo

func (m *QueryValidatorIndexRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryValidatorIndexResponse is the response type for the Query/ValidatorIndex RPC method.
type QueryValidatorIndexResponse struct {
	Index *ValidatorIndex `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryValidatorIndexResponse) Reset()         { *m = QueryValidatorIndexResponse{} }
func (m *QueryValidatorIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorIndexResponse) ProtoMessage()    {}
func (*QueryValidatorIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{7}
}
func (m *QueryValidatorIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorIndexResponse.Merge(m, src)
}
func (m *QueryValidatorIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorIndexResponse proto.InternalMessageInfo

func (m *QueryValidatorIndexResponse) GetIndex() *ValidatorIndex {
	if m != nil {
		return m.Index
	}
	return nil
}

// QuerySoftConfirmationStatusRequest is the request type for the Query/SoftConfirmationStatus RPC method.
type QuerySoftConfirmationStatusRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QuerySoftConfirmationStatusRequest) Reset()         { *m = QuerySoftConfirmationStatusRequest{} }
func (m *QuerySoftConfirmationStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySoftConfirmationStatusRequest) ProtoMessage()    {}
func (*QuerySoftConfirmationStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{8}
}
func (m *QuerySoftConfirmationStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySoftConfirmationStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySoftConfirmationStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySoftConfirmationStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySoftConfirmationStatusRequest.Merge(m, src)
}
func (m *QuerySoftConfirmationStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySoftConfirmationStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySoftConfirmationStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySoftConfirmationStatusRequest proto.InternalMessageInfo

func (m *QuerySoftConfirmationStatusRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QuerySoftConfirmationStatusResponse is the response type for the Query/SoftConfirmationStatus RPC method.
type QuerySoftConfirmationStatusResponse struct {
	IsSoftConfirmed bool   `protobuf:"varint,1,opt,name=is_soft_confirmed,json=isSoftConfirmed,proto3" json:"is_soft_confirmed,omitempty"`
	VotedPower      uint64 `protobuf:"varint,2,opt,name=voted_power,json=votedPower,proto3" json:"voted_power,omitempty"`
	TotalPower      uint64 `protobuf:"varint,3,opt,name=total_power,json=totalPower,proto3" json:"total_power,omitempty"`
	QuorumFraction  string `protobuf:"bytes,4,opt,name=quorum_fraction,json=quorumFraction,proto3" json:"quorum_fraction,omitempty"`
}

func (m *QuerySoftConfirmationStatusResponse) Reset()         { *m = QuerySoftConfirmationStatusResponse{} }
func (m *QuerySoftConfirmationStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySoftConfirmationStatusResponse) ProtoMessage()    {}
func (*QuerySoftConfirmationStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{9}
}
func (m *QuerySoftConfirmationStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySoftConfirmationStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySoftConfirmationStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySoftConfirmationStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySoftConfirmationStatusResponse.Merge(m, src)
}
func (m *QuerySoftConfirmationStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySoftConfirmationStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySoftConfirmationStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySoftConfirmationStatusResponse proto.InternalMessageInfo

func (m *QuerySoftConfirmationStatusResponse) GetIsSoftConfirmed() bool {
	if m != nil {
		return m.IsSoftConfirmed
	}
	return false
}

func (m *QuerySoftConfirmationStatusResponse) GetVotedPower() uint64 {
	if m != nil {
		return m.VotedPower
	}
	return 0
}

func (m *QuerySoftConfirmationStatusResponse) GetTotalPower() uint64 {
	if m != nil {
		return m.TotalPower
	}
	return 0
}

func (m *QuerySoftConfirmationStatusResponse) GetQuorumFraction() string {
	if m != nil {
		return m.QuorumFraction
	}
	return ""
}

// QueryAttesterSignaturesRequest is the request type for the Query/AttesterSignatures RPC method.
type QueryAttesterSignaturesRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryAttesterSignaturesRequest) Reset()         { *m = QueryAttesterSignaturesRequest{} }
func (m *QueryAttesterSignaturesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAttesterSignaturesRequest) ProtoMessage()    {}
func (*QueryAttesterSignaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{10}
}
func (m *QueryAttesterSignaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttesterSignaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttesterSignaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttesterSignaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttesterSignaturesRequest.Merge(m, src)
}
func (m *QueryAttesterSignaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttesterSignaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttesterSignaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttesterSignaturesRequest proto.InternalMessageInfo

func (m *QueryAttesterSignaturesRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// AttesterSignature represents a single attester's signature for a block
type AttesterSignature struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Signature        []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *AttesterSignature) Reset()         { *m = AttesterSignature{} }
func (m *AttesterSignature) String() string { return proto.CompactTextString(m) }
func (*AttesterSignature) ProtoMessage()    {}
func (*AttesterSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{11}
}
func (m *AttesterSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttesterSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttesterSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttesterSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttesterSignature.Merge(m, src)
}
func (m *AttesterSignature) XXX_Size() int {
	return m.Size()
}
func (m *AttesterSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_AttesterSignature.DiscardUnknown(m)
}

var xxx_messageInfo_AttesterSignature proto.InternalMessageInfo

func (m *AttesterSignature) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *AttesterSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// QueryAttesterSignaturesResponse is the response type for the Query/AttesterSignatures RPC method.
type QueryAttesterSignaturesResponse struct {
	Signatures []*AttesterSignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *QueryAttesterSignaturesResponse) Reset()         { *m = QueryAttesterSignaturesResponse{} }
func (m *QueryAttesterSignaturesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAttesterSignaturesResponse) ProtoMessage()    {}
func (*QueryAttesterSignaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{12}
}
func (m *QueryAttesterSignaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttesterSignaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttesterSignaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttesterSignaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttesterSignaturesResponse.Merge(m, src)
}
func (m *QueryAttesterSignaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttesterSignaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttesterSignaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttesterSignaturesResponse proto.InternalMessageInfo

func (m *QueryAttesterSignaturesResponse) GetSignatures() []*AttesterSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// QueryLastAttestedHeightRequest is the request type for the Query/LastAttestedHeight RPC method.
type QueryLastAttestedHeightRequest struct {
}

func (m *QueryLastAttestedHeightRequest) Reset()         { *m = QueryLastAttestedHeightRequest{} }
func (m *QueryLastAttestedHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastAttestedHeightRequest) ProtoMessage()    {}
func (*QueryLastAttestedHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{13}
}
func (m *QueryLastAttestedHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastAttestedHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastAttestedHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastAttestedHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastAttestedHeightRequest.Merge(m, src)
}
func (m *QueryLastAttestedHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastAttestedHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastAttestedHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastAttestedHeightRequest proto.InternalMessageInfo

// QueryLastAttestedHeightResponse is the response type for the Query/LastAttestedHeight RPC method.
type QueryLastAttestedHeightResponse struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryLastAttestedHeightResponse) Reset()         { *m = QueryLastAttestedHeightResponse{} }
func (m *QueryLastAttestedHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastAttestedHeightResponse) ProtoMessage()    {}
func (*QueryLastAttestedHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faab6bfc228a74e1, []int{14}
}
func (m *QueryLastAttestedHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastAttestedHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastAttestedHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastAttestedHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastAttestedHeightResponse.Merge(m, src)
}
func (m *QueryLastAttestedHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastAttestedHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastAttestedHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastAttestedHeightResponse proto.InternalMessageInfo

func (m *QueryLastAttestedHeightResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "evabci.network.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "evabci.network.v1.QueryParamsResponse")
	proto.RegisterType((*QueryAttestationBitmapRequest)(nil), "evabci.network.v1.QueryAttestationBitmapRequest")
	proto.RegisterType((*QueryAttestationBitmapResponse)(nil), "evabci.network.v1.QueryAttestationBitmapResponse")
	proto.RegisterType((*QueryEpochInfoRequest)(nil), "evabci.network.v1.QueryEpochInfoRequest")
	proto.RegisterType((*QueryEpochInfoResponse)(nil), "evabci.network.v1.QueryEpochInfoResponse")
	proto.RegisterType((*QueryValidatorIndexRequest)(nil), "evabci.network.v1.QueryValidatorIndexRequest")
	proto.RegisterType((*QueryValidatorIndexResponse)(nil), "evabci.network.v1.QueryValidatorIndexResponse")
	proto.RegisterType((*QuerySoftConfirmationStatusRequest)(nil), "evabci.network.v1.QuerySoftConfirmationStatusRequest")
	proto.RegisterType((*QuerySoftConfirmationStatusResponse)(nil), "evabci.network.v1.QuerySoftConfirmationStatusResponse")
	proto.RegisterType((*QueryAttesterSignaturesRequest)(nil), "evabci.network.v1.QueryAttesterSignaturesRequest")
	proto.RegisterType((*AttesterSignature)(nil), "evabci.network.v1.AttesterSignature")
	proto.RegisterType((*QueryAttesterSignaturesResponse)(nil), "evabci.network.v1.QueryAttesterSignaturesResponse")
	proto.RegisterType((*QueryLastAttestedHeightRequest)(nil), "evabci.network.v1.QueryLastAttestedHeightRequest")
	proto.RegisterType((*QueryLastAttestedHeightResponse)(nil), "evabci.network.v1.QueryLastAttestedHeightResponse")
}

func init() { proto.RegisterFile("evabci/network/v1/query.proto", fileDescriptor_faab6bfc228a74e1) }

var fileDescriptor_faab6bfc228a74e1 = []byte{
	// 961 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0x36, 0x89, 0xa9, 0xdf, 0x44, 0x6d, 0x33, 0x0d, 0x21, 0xdd, 0x36, 0x4e, 0xb2, 0x40,
	0xeb, 0x16, 0xd9, 0x53, 0x07, 0xb5, 0xa5, 0x52, 0x2f, 0x0d, 0x1f, 0xa2, 0x08, 0xa1, 0xb2, 0x91,
	0x7a, 0xe0, 0x80, 0x35, 0xde, 0x1d, 0x6f, 0x56, 0xb5, 0x77, 0x36, 0x3b, 0xe3, 0x2d, 0x25, 0xca,
	0x85, 0x23, 0x5c, 0x90, 0xf8, 0x01, 0x9c, 0x11, 0xfc, 0x04, 0xc4, 0xb9, 0xc7, 0x4a, 0x5c, 0x38,
	0x21, 0x94, 0xf0, 0x33, 0x38, 0xa0, 0x7d, 0x67, 0xbc, 0xb6, 0xe3, 0xdd, 0x7c, 0x9c, 0x92, 0x7d,
	0xde, 0xe7, 0x79, 0xe7, 0x99, 0x8f, 0xf7, 0x91, 0x61, 0x8d, 0xa7, 0xac, 0xe3, 0x85, 0x34, 0xe2,
	0xea, 0x85, 0x48, 0x9e, 0xd3, 0xb4, 0x45, 0xf7, 0x06, 0x3c, 0x79, 0xd9, 0x8c, 0x13, 0xa1, 0x04,
	0x59, 0xd2, 0xe5, 0xa6, 0x29, 0x37, 0xd3, 0x96, 0xbd, 0x1c, 0x88, 0x40, 0x60, 0x95, 0x66, 0xff,
	0x69, 0xa2, 0x7d, 0x23, 0x10, 0x22, 0xe8, 0x71, 0xca, 0xe2, 0x90, 0xb2, 0x28, 0x12, 0x8a, 0xa9,
	0x50, 0x44, 0xd2, 0x54, 0xef, 0x78, 0x42, 0xf6, 0x85, 0xa4, 0x1d, 0x26, 0xb9, 0xee, 0x4f, 0xd3,
	0x56, 0x87, 0x2b, 0xd6, 0xa2, 0x31, 0x0b, 0xc2, 0x08, 0xc9, 0x86, 0x5b, 0xe0, 0x48, 0xbd, 0x8c,
	0xb9, 0x69, 0xe5, 0x2c, 0x03, 0xf9, 0x32, 0x6b, 0xf0, 0x94, 0x25, 0xac, 0x2f, 0x5d, 0xbe, 0x37,
	0xe0, 0x52, 0x39, 0x5f, 0xc0, 0xd5, 0x09, 0x54, 0xc6, 0x22, 0x92, 0x9c, 0x3c, 0x80, 0x4a, 0x8c,
	0xc8, 0xaa, 0xb5, 0x61, 0xd5, 0x17, 0xb6, 0xae, 0x35, 0xa7, 0xf6, 0xd3, 0xd4, 0x92, 0xed, 0xb9,
	0x57, 0x7f, 0xaf, 0xcf, 0xb8, 0x86, 0xee, 0x3c, 0x80, 0x35, 0xec, 0xf7, 0x58, 0x29, 0x2e, 0xf5,
	0x5e, 0xb6, 0x43, 0xd5, 0x67, 0xb1, 0x59, 0x90, 0xac, 0x40, 0x65, 0x97, 0x87, 0xc1, 0xae, 0xc2,
	0xce, 0xb3, 0xae, 0xf9, 0x72, 0xbe, 0x86, 0x5a, 0x99, 0xd0, 0x78, 0x7a, 0x04, 0x95, 0x0e, 0x22,
	0xc6, 0xd3, 0x3b, 0x05, 0x9e, 0xa6, 0xd5, 0x46, 0xe3, 0x34, 0xe0, 0x4d, 0xec, 0xff, 0x71, 0x2c,
	0xbc, 0xdd, 0x27, 0x51, 0x57, 0x0c, 0x0d, 0x2d, 0xc3, 0x3c, 0xcf, 0x30, 0xec, 0x3a, 0xe7, 0xea,
	0x0f, 0xe7, 0x87, 0x0b, 0xb0, 0x72, 0x9c, 0x6f, 0x7c, 0x14, 0x0a, 0xc8, 0x26, 0x2c, 0x4a, 0xc5,
	0x12, 0xd5, 0x36, 0xbb, 0xbb, 0x80, 0xbb, 0x5b, 0x40, 0xec, 0x53, 0x84, 0xc8, 0x1a, 0x00, 0x8f,
	0xfc, 0x21, 0x61, 0x16, 0x09, 0x55, 0x1e, 0xf9, 0xa6, 0xdc, 0x82, 0xe5, 0x98, 0x25, 0x2a, 0xf4,
	0xc2, 0x18, 0x37, 0xd0, 0x36, 0xbb, 0x9d, 0xdb, 0xb0, 0xea, 0x8b, 0xee, 0xd5, 0x89, 0x9a, 0xde,
	0x1c, 0x79, 0x0f, 0x96, 0x98, 0xa7, 0xc2, 0x94, 0xb7, 0x53, 0xd6, 0x0b, 0x7d, 0xa6, 0x44, 0x22,
	0x57, 0xe7, 0xd1, 0xd6, 0x15, 0x5d, 0x78, 0x96, 0xe3, 0xe4, 0x21, 0xac, 0x8e, 0xf5, 0x88, 0x82,
	0x71, 0x4d, 0x05, 0x35, 0x6f, 0x4d, 0xd4, 0x47, 0x52, 0xe7, 0x3e, 0xd8, 0x78, 0x18, 0x39, 0xf4,
	0x24, 0xf2, 0xf9, 0x37, 0xc3, 0x13, 0x5c, 0x85, 0x37, 0x98, 0xef, 0x27, 0x5c, 0xea, 0xd7, 0x52,
	0x75, 0x87, 0x9f, 0xce, 0x33, 0xb8, 0x5e, 0xa8, 0xcb, 0x5f, 0xd9, 0x7c, 0x98, 0x01, 0xe6, 0x42,
	0x37, 0x0b, 0x2e, 0xf4, 0x98, 0x52, 0xf3, 0x9d, 0x47, 0xe0, 0x60, 0xdf, 0x1d, 0xd1, 0x55, 0x1f,
	0x8a, 0xa8, 0x1b, 0x26, 0x7d, 0x3c, 0x96, 0x1d, 0xc5, 0xd4, 0x40, 0x9e, 0xf6, 0xd4, 0x7e, 0xb7,
	0xe0, 0xed, 0x13, 0xe5, 0xc6, 0xde, 0x1d, 0x58, 0x0a, 0x65, 0x5b, 0x8a, 0xae, 0x6a, 0x7b, 0x9a,
	0xc5, 0x7d, 0x6c, 0x75, 0xd1, 0xbd, 0x1c, 0xca, 0x31, 0x31, 0xf7, 0xc9, 0x3a, 0x2c, 0xa4, 0x42,
	0x71, 0xbf, 0x1d, 0x8b, 0x17, 0x3c, 0xc1, 0xdb, 0x9f, 0x73, 0x01, 0xa1, 0xa7, 0x19, 0x92, 0x11,
	0x94, 0x50, 0xac, 0x67, 0x08, 0xb3, 0x9a, 0x80, 0x90, 0x26, 0xdc, 0x82, 0xcb, 0x7b, 0x03, 0x91,
	0x0c, 0xfa, 0xed, 0x6e, 0x92, 0xdd, 0x9d, 0x88, 0xf0, 0xe6, 0xab, 0xee, 0x25, 0x0d, 0x7f, 0x62,
	0x50, 0xe7, 0x83, 0x89, 0x49, 0xe1, 0xc9, 0x4e, 0x18, 0x44, 0x4c, 0x0d, 0x12, 0x2e, 0x4f, 0x9f,
	0xb1, 0xa5, 0x29, 0x51, 0xf6, 0x86, 0xf2, 0x87, 0xd0, 0x9e, 0xbc, 0xc7, 0x2b, 0x79, 0xe1, 0xb1,
	0xc6, 0xc9, 0x0d, 0xa8, 0xca, 0xa1, 0x12, 0x37, 0xb9, 0xe8, 0x8e, 0x00, 0x27, 0x80, 0xf5, 0x52,
	0x67, 0xe6, 0x4c, 0x3f, 0x02, 0xc8, 0xf9, 0xd9, 0x32, 0xb3, 0x27, 0x0e, 0xf2, 0x58, 0x0b, 0x77,
	0x4c, 0xe7, 0x6c, 0x98, 0x23, 0xf8, 0x9c, 0x49, 0x65, 0x98, 0x66, 0x8a, 0x86, 0xb9, 0xf6, 0xd0,
	0x58, 0x29, 0x62, 0x18, 0x2b, 0x25, 0xa7, 0xb4, 0xf5, 0xdf, 0x45, 0x98, 0x47, 0x2d, 0xf9, 0x16,
	0x2a, 0x3a, 0xe4, 0xc8, 0xbb, 0x05, 0x16, 0xa7, 0xd3, 0xd4, 0xbe, 0x79, 0x1a, 0x4d, 0x2f, 0xed,
	0x6c, 0x7e, 0xf7, 0xe7, 0xbf, 0x3f, 0x5d, 0xb8, 0x4e, 0xae, 0xd1, 0xe9, 0xcc, 0xd6, 0x41, 0x4a,
	0x7e, 0xb1, 0x86, 0x97, 0x35, 0x3e, 0xf0, 0x77, 0xcb, 0x16, 0x28, 0xcb, 0x5b, 0xbb, 0x75, 0x0e,
	0x85, 0x71, 0x47, 0xd1, 0xdd, 0x6d, 0x72, 0xab, 0xc0, 0x1d, 0x1b, 0xa9, 0xe8, 0xbe, 0x3e, 0xb0,
	0x03, 0xf2, 0xbd, 0x05, 0xd5, 0x3c, 0x27, 0x49, 0xbd, 0x6c, 0xc5, 0xe3, 0xd1, 0x6b, 0xdf, 0x3e,
	0x03, 0xd3, 0x78, 0xaa, 0xa3, 0x27, 0x87, 0x6c, 0x14, 0x78, 0xc2, 0x00, 0xa6, 0xfb, 0xf8, 0xe7,
	0x80, 0xfc, 0x6c, 0xc1, 0xa5, 0xc9, 0xd4, 0x20, 0x8d, 0xb2, 0x75, 0x0a, 0xf3, 0xcc, 0x6e, 0x9e,
	0x95, 0x6e, 0xbc, 0x35, 0xd1, 0x5b, 0x9d, 0xdc, 0x2c, 0xf0, 0x96, 0x4f, 0x10, 0xdd, 0x37, 0xb3,
	0x75, 0x40, 0xfe, 0xb0, 0x60, 0xa5, 0x38, 0x7a, 0xc8, 0xbd, 0xb2, 0xa5, 0x4f, 0x4c, 0x3a, 0xfb,
	0xfe, 0x79, 0x65, 0xc6, 0xf9, 0x3d, 0x74, 0x4e, 0x49, 0xa3, 0xc0, 0x79, 0x96, 0x7b, 0x0d, 0x6f,
	0x4c, 0x3b, 0xba, 0xef, 0x5f, 0x2d, 0x20, 0xd3, 0x33, 0x4e, 0x4e, 0x79, 0x6a, 0x05, 0x49, 0x65,
	0x6f, 0x9d, 0x47, 0x72, 0x86, 0xe3, 0x1e, 0x65, 0xc4, 0xc8, 0xed, 0x6f, 0x16, 0x90, 0xe9, 0x18,
	0x28, 0x77, 0x5b, 0x1a, 0x2a, 0xe5, 0x6e, 0xcb, 0x53, 0xe6, 0xc4, 0x61, 0xea, 0x31, 0xa9, 0x1a,
	0xcc, 0xe8, 0x1a, 0xda, 0xef, 0xf6, 0x67, 0xaf, 0x0e, 0x6b, 0xd6, 0xeb, 0xc3, 0x9a, 0xf5, 0xcf,
	0x61, 0xcd, 0xfa, 0xf1, 0xa8, 0x36, 0xf3, 0xfa, 0xa8, 0x36, 0xf3, 0xd7, 0x51, 0x6d, 0xe6, 0xab,
	0xbb, 0x41, 0xa8, 0x76, 0x07, 0x9d, 0xa6, 0x27, 0xfa, 0x94, 0xa7, 0x52, 0x31, 0xef, 0x39, 0xe5,
	0x69, 0x03, 0xbb, 0xf6, 0x85, 0x3f, 0xe8, 0x71, 0x99, 0x77, 0xc7, 0x5f, 0x7e, 0x9d, 0x0a, 0xfe,
	0xf4, 0x7b, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x8a, 0x52, 0x7e, 0xad, 0x0a, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the module parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AttestationBitmap queries the attestation bitmap for a specific height
	AttestationBitmap(ctx context.Context, in *QueryAttestationBitmapRequest, opts ...grpc.CallOption) (*QueryAttestationBitmapResponse, error)
	// EpochInfo queries information about a specific epoch
	EpochInfo(ctx context.Context, in *QueryEpochInfoRequest, opts ...grpc.CallOption) (*QueryEpochInfoResponse, error)
	// ValidatorIndex queries the bitmap index for a validator
	ValidatorIndex(ctx context.Context, in *QueryValidatorIndexRequest, opts ...grpc.CallOption) (*QueryValidatorIndexResponse, error)
	// SoftConfirmationStatus queries if a height is soft-confirmed
	SoftConfirmationStatus(ctx context.Context, in *QuerySoftConfirmationStatusRequest, opts ...grpc.CallOption) (*QuerySoftConfirmationStatusResponse, error)
	// AttesterSignatures queries all attester signatures for a specific height
	AttesterSignatures(ctx context.Context, in *QueryAttesterSignaturesRequest, opts ...grpc.CallOption) (*QueryAttesterSignaturesResponse, error)
	// LastAttestedHeight queries the last height that reached quorum
	LastAttestedHeight(ctx context.Context, in *QueryLastAttestedHeightRequest, opts ...grpc.CallOption) (*QueryLastAttestedHeightResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttestationBitmap(ctx context.Context, in *QueryAttestationBitmapRequest, opts ...grpc.CallOption) (*QueryAttestationBitmapResponse, error) {
	out := new(QueryAttestationBitmapResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Query/AttestationBitmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochInfo(ctx context.Context, in *QueryEpochInfoRequest, opts ...grpc.CallOption) (*QueryEpochInfoResponse, error) {
	out := new(QueryEpochInfoResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Query/EpochInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorIndex(ctx context.Context, in *QueryValidatorIndexRequest, opts ...grpc.CallOption) (*QueryValidatorIndexResponse, error) {
	out := new(QueryValidatorIndexResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Query/ValidatorIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SoftConfirmationStatus(ctx context.Context, in *QuerySoftConfirmationStatusRequest, opts ...grpc.CallOption) (*QuerySoftConfirmationStatusResponse, error) {
	out := new(QuerySoftConfirmationStatusResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Query/SoftConfirmationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttesterSignatures(ctx context.Context, in *QueryAttesterSignaturesRequest, opts ...grpc.CallOption) (*QueryAttesterSignaturesResponse, error) {
	out := new(QueryAttesterSignaturesResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Query/AttesterSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastAttestedHeight(ctx context.Context, in *QueryLastAttestedHeightRequest, opts ...grpc.CallOption) (*QueryLastAttestedHeightResponse, error) {
	out := new(QueryLastAttestedHeightResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Query/LastAttestedHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the module parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AttestationBitmap queries the attestation bitmap for a specific height
	AttestationBitmap(context.Context, *QueryAttestationBitmapRequest) (*QueryAttestationBitmapResponse, error)
	// EpochInfo queries information about a specific epoch
	EpochInfo(context.Context, *QueryEpochInfoRequest) (*QueryEpochInfoResponse, error)
	// ValidatorIndex queries the bitmap index for a validator
	ValidatorIndex(context.Context, *QueryValidatorIndexRequest) (*QueryValidatorIndexResponse, error)
	// SoftConfirmationStatus queries if a height is soft-confirmed
	SoftConfirmationStatus(context.Context, *QuerySoftConfirmationStatusRequest) (*QuerySoftConfirmationStatusResponse, error)
	// AttesterSignatures queries all attester signatures for a specific height
	AttesterSignatures(context.Context, *QueryAttesterSignaturesRequest) (*QueryAttesterSignaturesResponse, error)
	// LastAttestedHeight queries the last height that reached quorum
	LastAttestedHeight(context.Context, *QueryLastAttestedHeightRequest) (*QueryLastAttestedHeightResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AttestationBitmap(ctx context.Context, req *QueryAttestationBitmapRequest) (*QueryAttestationBitmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestationBitmap not implemented")
}
func (*UnimplementedQueryServer) EpochInfo(ctx context.Context, req *QueryEpochInfoRequest) (*QueryEpochInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochInfo not implemented")
}
func (*UnimplementedQueryServer) ValidatorIndex(ctx context.Context, req *QueryValidatorIndexRequest) (*QueryValidatorIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorIndex not implemented")
}
func (*UnimplementedQueryServer) SoftConfirmationStatus(ctx context.Context, req *QuerySoftConfirmationStatusRequest) (*QuerySoftConfirmationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftConfirmationStatus not implemented")
}
func (*UnimplementedQueryServer) AttesterSignatures(ctx context.Context, req *QueryAttesterSignaturesRequest) (*QueryAttesterSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttesterSignatures not implemented")
}
func (*UnimplementedQueryServer) LastAttestedHeight(ctx context.Context, req *QueryLastAttestedHeightRequest) (*QueryLastAttestedHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastAttestedHeight not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttestationBitmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttestationBitmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttestationBitmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Query/AttestationBitmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttestationBitmap(ctx, req.(*QueryAttestationBitmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Query/EpochInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochInfo(ctx, req.(*QueryEpochInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Query/ValidatorIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorIndex(ctx, req.(*QueryValidatorIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SoftConfirmationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySoftConfirmationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SoftConfirmationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Query/SoftConfirmationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SoftConfirmationStatus(ctx, req.(*QuerySoftConfirmationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttesterSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttesterSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttesterSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Query/AttesterSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttesterSignatures(ctx, req.(*QueryAttesterSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastAttestedHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastAttestedHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastAttestedHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Query/LastAttestedHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastAttestedHeight(ctx, req.(*QueryLastAttestedHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evabci.network.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AttestationBitmap",
			Handler:    _Query_AttestationBitmap_Handler,
		},
		{
			MethodName: "EpochInfo",
			Handler:    _Query_EpochInfo_Handler,
		},
		{
			MethodName: "ValidatorIndex",
			Handler:    _Query_ValidatorIndex_Handler,
		},
		{
			MethodName: "SoftConfirmationStatus",
			Handler:    _Query_SoftConfirmationStatus_Handler,
		},
		{
			MethodName: "AttesterSignatures",
			Handler:    _Query_AttesterSignatures_Handler,
		},
		{
			MethodName: "LastAttestedHeight",
			Handler:    _Query_LastAttestedHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evabci/network/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAttestationBitmapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationBitmapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationBitmapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttestationBitmapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationBitmapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationBitmapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bitmap != nil {
		{
			size, err := m.Bitmap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEpochInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEpochInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParticipatingValidators != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ParticipatingValidators))
		i--
		dAtA[i] = 0x30
	}
	if m.ActiveValidators != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ActiveValidators))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ParticipationBitmap) > 0 {
		i -= len(m.ParticipationBitmap)
		copy(dAtA[i:], m.ParticipationBitmap)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ParticipationBitmap)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.StartHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != nil {
		{
			size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySoftConfirmationStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySoftConfirmationStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySoftConfirmationStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySoftConfirmationStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySoftConfirmationStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySoftConfirmationStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuorumFraction) > 0 {
		i -= len(m.QuorumFraction)
		copy(dAtA[i:], m.QuorumFraction)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QuorumFraction)))
		i--
		dAtA[i] = 0x22
	}
	if m.TotalPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalPower))
		i--
		dAtA[i] = 0x18
	}
	if m.VotedPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotedPower))
		i--
		dAtA[i] = 0x10
	}
	if m.IsSoftConfirmed {
		i--
		if m.IsSoftConfirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttesterSignaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttesterSignaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttesterSignaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AttesterSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttesterSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttesterSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttesterSignaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttesterSignaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttesterSignaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastAttestedHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastAttestedHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastAttestedHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastAttestedHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastAttestedHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastAttestedHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAttestationBitmapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryAttestationBitmapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bitmap != nil {
		l = m.Bitmap.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEpochInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	return n
}

func (m *QueryEpochInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	if m.StartHeight != 0 {
		n += 1 + sovQuery(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovQuery(uint64(m.EndHeight))
	}
	l = len(m.ParticipationBitmap)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ActiveValidators != 0 {
		n += 1 + sovQuery(uint64(m.ActiveValidators))
	}
	if m.ParticipatingValidators != 0 {
		n += 1 + sovQuery(uint64(m.ParticipatingValidators))
	}
	return n
}

func (m *QueryValidatorIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySoftConfirmationStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QuerySoftConfirmationStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSoftConfirmed {
		n += 2
	}
	if m.VotedPower != 0 {
		n += 1 + sovQuery(uint64(m.VotedPower))
	}
	if m.TotalPower != 0 {
		n += 1 + sovQuery(uint64(m.TotalPower))
	}
	l = len(m.QuorumFraction)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAttesterSignaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *AttesterSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAttesterSignaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastAttestedHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastAttestedHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationBitmapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationBitmapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationBitmapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationBitmapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationBitmapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationBitmapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitmap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bitmap == nil {
				m.Bitmap = &AttestationBitmap{}
			}
			if err := m.Bitmap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationBitmap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipationBitmap = append(m.ParticipationBitmap[:0], dAtA[iNdEx:postIndex]...)
			if m.ParticipationBitmap == nil {
				m.ParticipationBitmap = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveValidators", wireType)
			}
			m.ActiveValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveValidators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipatingValidators", wireType)
			}
			m.ParticipatingValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipatingValidators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Index == nil {
				m.Index = &ValidatorIndex{}
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySoftConfirmationStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySoftConfirmationStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySoftConfirmationStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySoftConfirmationStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySoftConfirmationStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySoftConfirmationStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSoftConfirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSoftConfirmed = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotedPower", wireType)
			}
			m.VotedPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotedPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPower", wireType)
			}
			m.TotalPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuorumFraction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttesterSignaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttesterSignaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttesterSignaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttesterSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttesterSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttesterSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttesterSignaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttesterSignaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttesterSignaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &AttesterSignature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastAttestedHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastAttestedHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastAttestedHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastAttestedHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastAttestedHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastAttestedHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

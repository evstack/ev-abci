// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evabci/network/v1/attester.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	codectypes "github.com/cosmos/cosmos-sdk/codec/types"
	cryptotypes "github.com/cosmos/cosmos-sdk/crypto/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AttesterInfo stores information about an attester
type AttesterInfo struct {
	// validator is the address of the attester
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// pubkey is the consensus public key of the attester
	Pubkey *types.Any `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// joined_height is the height at which the attester joined
	JoinedHeight int64 `protobuf:"varint,3,opt,name=joined_height,json=joinedHeight,proto3" json:"joined_height,omitempty"`
}

func (m *AttesterInfo) Reset()         { *m = AttesterInfo{} }
func (m *AttesterInfo) String() string { return proto.CompactTextString(m) }
func (*AttesterInfo) ProtoMessage()    {}
func (*AttesterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8fe3a2e81f284b4, []int{0}
}
func (m *AttesterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttesterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttesterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttesterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttesterInfo.Merge(m, src)
}
func (m *AttesterInfo) XXX_Size() int {
	return m.Size()
}
func (m *AttesterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AttesterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AttesterInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AttesterInfo)(nil), "evabci.network.v1.AttesterInfo")
}

func init() { proto.RegisterFile("evabci/network/v1/attester.proto", fileDescriptor_a8fe3a2e81f284b4) }

var fileDescriptor_a8fe3a2e81f284b4 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x3d, 0x4e, 0xeb, 0x40,
	0x10, 0xc7, 0xbd, 0x2f, 0x52, 0xf4, 0xe2, 0x97, 0x57, 0x60, 0xa5, 0x70, 0x22, 0xe1, 0x18, 0x68,
	0xd2, 0x64, 0x97, 0x40, 0x47, 0x83, 0x92, 0x02, 0xf1, 0xd1, 0xa0, 0x20, 0x51, 0xd0, 0x44, 0xfe,
	0x98, 0x6c, 0x4c, 0x12, 0x8f, 0xb5, 0xbb, 0x36, 0xf2, 0x0d, 0x28, 0x39, 0x42, 0x0e, 0x91, 0x33,
	0x20, 0x44, 0x15, 0x51, 0x51, 0xa2, 0xa4, 0xe1, 0x18, 0x08, 0xaf, 0x03, 0xdd, 0xce, 0x6f, 0x7e,
	0x33, 0xfb, 0xd7, 0x98, 0x2e, 0x64, 0x9e, 0x1f, 0x44, 0x2c, 0x06, 0xf5, 0x80, 0x62, 0xca, 0xb2,
	0x1e, 0xf3, 0x94, 0x02, 0xa9, 0x40, 0xd0, 0x44, 0xa0, 0x42, 0x6b, 0x47, 0x1b, 0xb4, 0x34, 0x68,
	0xd6, 0x6b, 0x35, 0x39, 0x22, 0x9f, 0x01, 0x2b, 0x04, 0x3f, 0x1d, 0x33, 0x2f, 0xce, 0xb5, 0xdd,
	0x6a, 0x06, 0x28, 0xe7, 0x28, 0x47, 0x45, 0xc5, 0x74, 0x51, 0xb6, 0x1a, 0x1c, 0x39, 0x6a, 0xfe,
	0xfd, 0xd2, 0x74, 0xff, 0x99, 0x98, 0xf5, 0x7e, 0xf9, 0xe3, 0x45, 0x3c, 0x46, 0xeb, 0xd4, 0xac,
	0x65, 0xde, 0x2c, 0x0a, 0x3d, 0x85, 0xc2, 0x26, 0x2e, 0xe9, 0xd4, 0x06, 0x7b, 0x6f, 0xcb, 0xee,
	0x6e, 0xb9, 0xeb, 0x76, 0xdb, 0xeb, 0x87, 0xa1, 0x00, 0x29, 0x6f, 0x94, 0x88, 0x62, 0x3e, 0xfc,
	0x9d, 0xb1, 0xce, 0xcc, 0x6a, 0x92, 0xfa, 0x53, 0xc8, 0xed, 0x3f, 0x2e, 0xe9, 0xfc, 0x3b, 0x6a,
	0x50, 0x1d, 0x97, 0x6e, 0xe3, 0xd2, 0x7e, 0x9c, 0x0f, 0xec, 0xd7, 0x65, 0xb7, 0x51, 0xee, 0x0c,
	0x44, 0x9e, 0x28, 0xa4, 0xd7, 0xa9, 0x7f, 0x05, 0xf9, 0xb0, 0x9c, 0xb6, 0x0e, 0xcc, 0xff, 0xf7,
	0x18, 0xc5, 0x10, 0x8e, 0x26, 0x10, 0xf1, 0x89, 0xb2, 0x2b, 0x2e, 0xe9, 0x54, 0x86, 0x75, 0x0d,
	0xcf, 0x0b, 0x76, 0xf2, 0xf7, 0x71, 0xd1, 0x36, 0x3e, 0x17, 0x6d, 0x63, 0x70, 0xf9, 0xb2, 0x76,
	0xc8, 0x6a, 0xed, 0x90, 0x8f, 0xb5, 0x43, 0x9e, 0x36, 0x8e, 0xb1, 0xda, 0x38, 0xc6, 0xfb, 0xc6,
	0x31, 0xee, 0x0e, 0x79, 0xa4, 0x26, 0xa9, 0x4f, 0x03, 0x9c, 0x33, 0xc8, 0xa4, 0xf2, 0x82, 0x29,
	0x83, 0xac, 0x5b, 0xdc, 0x7d, 0x8e, 0x61, 0x3a, 0x03, 0xf9, 0x73, 0x7f, 0x95, 0x27, 0x20, 0xfd,
	0x6a, 0x11, 0xf5, 0xf8, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x70, 0xe5, 0x74, 0x5e, 0x9e, 0x01, 0x00,
	0x00,
}

func (m *AttesterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttesterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttesterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JoinedHeight != 0 {
		i = encodeVarintAttester(dAtA, i, uint64(m.JoinedHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttester(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintAttester(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttester(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttester(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AttesterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovAttester(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovAttester(uint64(l))
	}
	if m.JoinedHeight != 0 {
		n += 1 + sovAttester(uint64(m.JoinedHeight))
	}
	return n
}

func sovAttester(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttester(x uint64) (n int) {
	return sovAttester(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AttesterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttester
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttesterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttesterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttester
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttester
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttester
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttester
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinedHeight", wireType)
			}
			m.JoinedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAttester(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttester
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttester(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttester
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttester
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttester
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttester
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttester
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttester
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttester        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttester          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttester = fmt.Errorf("proto: unexpected end of group")
)

// UnpackInterfaces implements UnpackInterfacesMessage.UnpackInterfaces
func (info *AttesterInfo) UnpackInterfaces(unpacker codectypes.AnyUnpacker) error {
	var pk cryptotypes.PubKey
	return unpacker.UnpackAny(info.Pubkey, &pk)
}

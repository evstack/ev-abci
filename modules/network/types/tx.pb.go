// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evabci/network/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAttest submits a signed vote for a checkpoint
type MsgAttest struct {
	// validator is the address of the validator submitting the attestation
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// height is the checkpoint height being attested
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// vote is the base64-encoded canonical Comet vote
	Vote []byte `protobuf:"bytes,3,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *MsgAttest) Reset()         { *m = MsgAttest{} }
func (m *MsgAttest) String() string { return proto.CompactTextString(m) }
func (*MsgAttest) ProtoMessage()    {}
func (*MsgAttest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8f10196ecbfaaff, []int{0}
}
func (m *MsgAttest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAttest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAttest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAttest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAttest.Merge(m, src)
}
func (m *MsgAttest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAttest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAttest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAttest proto.InternalMessageInfo

// MsgAttestResponse is the response type for the Attest RPC
type MsgAttestResponse struct {
}

func (m *MsgAttestResponse) Reset()         { *m = MsgAttestResponse{} }
func (m *MsgAttestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAttestResponse) ProtoMessage()    {}
func (*MsgAttestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8f10196ecbfaaff, []int{1}
}
func (m *MsgAttestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAttestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAttestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAttestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAttestResponse.Merge(m, src)
}
func (m *MsgAttestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAttestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAttestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAttestResponse proto.InternalMessageInfo

// MsgJoinAttesterSet opts a validator into the attester set
type MsgJoinAttesterSet struct {
	// validator is the address of the validator joining
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// pubkey is the consensus public key of the validator
	Pubkey *types.Any `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *MsgJoinAttesterSet) Reset()         { *m = MsgJoinAttesterSet{} }
func (m *MsgJoinAttesterSet) String() string { return proto.CompactTextString(m) }
func (*MsgJoinAttesterSet) ProtoMessage()    {}
func (*MsgJoinAttesterSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8f10196ecbfaaff, []int{2}
}
func (m *MsgJoinAttesterSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinAttesterSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinAttesterSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinAttesterSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinAttesterSet.Merge(m, src)
}
func (m *MsgJoinAttesterSet) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinAttesterSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinAttesterSet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinAttesterSet proto.InternalMessageInfo

// MsgJoinAttesterSetResponse is the response type for the JoinAttesterSet RPC
type MsgJoinAttesterSetResponse struct {
}

func (m *MsgJoinAttesterSetResponse) Reset()         { *m = MsgJoinAttesterSetResponse{} }
func (m *MsgJoinAttesterSetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinAttesterSetResponse) ProtoMessage()    {}
func (*MsgJoinAttesterSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8f10196ecbfaaff, []int{3}
}
func (m *MsgJoinAttesterSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinAttesterSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinAttesterSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinAttesterSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinAttesterSetResponse.Merge(m, src)
}
func (m *MsgJoinAttesterSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinAttesterSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinAttesterSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinAttesterSetResponse proto.InternalMessageInfo

// MsgLeaveAttesterSet opts a validator out of the attester set
type MsgLeaveAttesterSet struct {
	// validator is the address of the validator leaving
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *MsgLeaveAttesterSet) Reset()         { *m = MsgLeaveAttesterSet{} }
func (m *MsgLeaveAttesterSet) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveAttesterSet) ProtoMessage()    {}
func (*MsgLeaveAttesterSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8f10196ecbfaaff, []int{4}
}
func (m *MsgLeaveAttesterSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveAttesterSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveAttesterSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveAttesterSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveAttesterSet.Merge(m, src)
}
func (m *MsgLeaveAttesterSet) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveAttesterSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveAttesterSet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveAttesterSet proto.InternalMessageInfo

// MsgLeaveAttesterSetResponse is the response type for the LeaveAttesterSet RPC
type MsgLeaveAttesterSetResponse struct {
}

func (m *MsgLeaveAttesterSetResponse) Reset()         { *m = MsgLeaveAttesterSetResponse{} }
func (m *MsgLeaveAttesterSetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveAttesterSetResponse) ProtoMessage()    {}
func (*MsgLeaveAttesterSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8f10196ecbfaaff, []int{5}
}
func (m *MsgLeaveAttesterSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveAttesterSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveAttesterSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveAttesterSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveAttesterSetResponse.Merge(m, src)
}
func (m *MsgLeaveAttesterSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveAttesterSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveAttesterSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveAttesterSetResponse proto.InternalMessageInfo

// MsgUpdateParams updates the network module parameters
type MsgUpdateParams struct {
	// authority is the address that controls the module
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8f10196ecbfaaff, []int{6}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

// MsgUpdateParamsResponse is the response type for the UpdateParams RPC
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8f10196ecbfaaff, []int{7}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAttest)(nil), "evabci.network.v1.MsgAttest")
	proto.RegisterType((*MsgAttestResponse)(nil), "evabci.network.v1.MsgAttestResponse")
	proto.RegisterType((*MsgJoinAttesterSet)(nil), "evabci.network.v1.MsgJoinAttesterSet")
	proto.RegisterType((*MsgJoinAttesterSetResponse)(nil), "evabci.network.v1.MsgJoinAttesterSetResponse")
	proto.RegisterType((*MsgLeaveAttesterSet)(nil), "evabci.network.v1.MsgLeaveAttesterSet")
	proto.RegisterType((*MsgLeaveAttesterSetResponse)(nil), "evabci.network.v1.MsgLeaveAttesterSetResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "evabci.network.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "evabci.network.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("evabci/network/v1/tx.proto", fileDescriptor_f8f10196ecbfaaff) }

var fileDescriptor_f8f10196ecbfaaff = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0x91, 0x12, 0x29, 0x47, 0xa5, 0x52, 0xb7, 0x6a, 0x13, 0xd3, 0x38, 0x21, 0x02, 0x14,
	0x45, 0xca, 0x99, 0x16, 0x09, 0x24, 0x16, 0x94, 0x0c, 0x0c, 0xa5, 0x91, 0x2a, 0x57, 0x30, 0x30,
	0x80, 0xec, 0xe4, 0xb8, 0x98, 0xc4, 0x3e, 0xcb, 0x77, 0x36, 0x78, 0x43, 0x4c, 0x6c, 0x74, 0x66,
	0xea, 0x4f, 0xe8, 0x50, 0xfe, 0x43, 0xc5, 0x54, 0x75, 0x62, 0x42, 0x28, 0x19, 0xca, 0xcf, 0x40,
	0xb5, 0xcf, 0x0e, 0x38, 0x2e, 0x74, 0xe8, 0x76, 0xcf, 0xdf, 0xf7, 0xbe, 0xf7, 0xdd, 0xf3, 0xbb,
	0x07, 0x15, 0x1c, 0x18, 0x66, 0xdf, 0xd2, 0x1c, 0xcc, 0xdf, 0x51, 0x6f, 0xa4, 0x05, 0x9b, 0x1a,
	0x7f, 0x8f, 0x5c, 0x8f, 0x72, 0x2a, 0x2f, 0xc7, 0x18, 0x12, 0x18, 0x0a, 0x36, 0x95, 0xf5, 0x3e,
	0x65, 0x36, 0x65, 0x9a, 0xcd, 0xc8, 0x39, 0xd5, 0x66, 0x24, 0xe6, 0x2a, 0x95, 0x18, 0x78, 0x1d,
	0x45, 0x5a, 0x1c, 0x08, 0x68, 0x95, 0x50, 0x42, 0xe3, 0xef, 0xe7, 0xa7, 0x24, 0x81, 0x50, 0x4a,
	0xc6, 0x58, 0x8b, 0x22, 0xd3, 0x7f, 0xa3, 0x19, 0x4e, 0x28, 0xa0, 0x6a, 0x8e, 0xa7, 0xd0, 0xc5,
	0x42, 0xaf, 0xb1, 0x0f, 0x60, 0xa9, 0xc7, 0x48, 0x87, 0x73, 0xcc, 0xb8, 0xfc, 0x04, 0x96, 0x02,
	0x63, 0x6c, 0x0d, 0x0c, 0x4e, 0xbd, 0x32, 0xa8, 0x83, 0x66, 0xa9, 0x7b, 0xfb, 0xf4, 0xa8, 0x5d,
	0x15, 0x16, 0x5e, 0x24, 0x58, 0x67, 0x30, 0xf0, 0x30, 0x63, 0x7b, 0xdc, 0xb3, 0x1c, 0xa2, 0xcf,
	0x72, 0xe4, 0x35, 0x58, 0x1c, 0x62, 0x8b, 0x0c, 0x79, 0xf9, 0x5a, 0x1d, 0x34, 0x0b, 0xba, 0x88,
	0x64, 0x19, 0x2e, 0x04, 0x94, 0xe3, 0x72, 0xa1, 0x0e, 0x9a, 0x8b, 0x7a, 0x74, 0x7e, 0xbc, 0xf6,
	0xe9, 0xa0, 0x26, 0xfd, 0x3a, 0xa8, 0x49, 0x1f, 0xcf, 0x0e, 0x5b, 0x33, 0x8d, 0xc6, 0x0a, 0x5c,
	0x4e, 0x1d, 0xe9, 0x98, 0xb9, 0xd4, 0x61, 0xb8, 0xf1, 0x15, 0x40, 0xb9, 0xc7, 0xc8, 0x36, 0xb5,
	0x9c, 0x18, 0xc1, 0xde, 0x1e, 0xbe, 0x02, 0xc3, 0x4f, 0x61, 0xd1, 0xf5, 0xcd, 0x11, 0x0e, 0x23,
	0xc3, 0x37, 0xb6, 0x56, 0x51, 0xdc, 0x4a, 0x94, 0xb4, 0x12, 0x75, 0x9c, 0xb0, 0x5b, 0xfe, 0x76,
	0xd4, 0x5e, 0x15, 0x9a, 0x7d, 0x2f, 0x74, 0x39, 0x45, 0xbb, 0xbe, 0xf9, 0x0c, 0x87, 0xba, 0xc8,
	0xbe, 0xf0, 0x32, 0x1b, 0x50, 0x99, 0xb7, 0x9d, 0xde, 0xca, 0x81, 0x2b, 0x3d, 0x46, 0x76, 0xb0,
	0x11, 0xe0, 0xab, 0xbc, 0xd5, 0x85, 0x6e, 0xaa, 0xf0, 0x56, 0x4e, 0xbd, 0xd4, 0xce, 0x17, 0x00,
	0x97, 0x7a, 0x8c, 0x3c, 0x77, 0x07, 0x06, 0xc7, 0xbb, 0x86, 0x67, 0xd8, 0x4c, 0x7e, 0x08, 0x4b,
	0x86, 0xcf, 0x87, 0xd4, 0xb3, 0x78, 0x28, 0xbc, 0x94, 0x4f, 0x67, 0xdd, 0xc8, 0x58, 0x48, 0xa9,
	0xf2, 0x23, 0x58, 0x74, 0x23, 0x05, 0xd1, 0xd8, 0x0a, 0x9a, 0x7b, 0x00, 0x28, 0x2e, 0xd1, 0x5d,
	0x38, 0xfe, 0x51, 0x93, 0x74, 0x41, 0xcf, 0x78, 0x4f, 0x05, 0x1b, 0x15, 0xb8, 0x9e, 0xf1, 0x96,
	0xf8, 0xde, 0xfa, 0x5c, 0x80, 0x85, 0x1e, 0x23, 0xf2, 0x0e, 0x2c, 0x8a, 0x41, 0xde, 0xc8, 0xa9,
	0x96, 0x0e, 0x95, 0x72, 0xe7, 0x5f, 0x68, 0xa2, 0x2a, 0x13, 0xb8, 0x94, 0x1d, 0xb7, 0xbb, 0xf9,
	0x89, 0x19, 0x9a, 0xd2, 0xbe, 0x14, 0x2d, 0x2d, 0xf4, 0x16, 0xde, 0x9c, 0x1b, 0x81, 0x7b, 0xf9,
	0x12, 0x59, 0x9e, 0x82, 0x2e, 0xc7, 0x4b, 0x6b, 0xbd, 0x82, 0x8b, 0x7f, 0xfd, 0xde, 0x46, 0x7e,
	0xfe, 0x9f, 0x1c, 0xa5, 0xf5, 0x7f, 0x4e, 0xa2, 0xaf, 0x5c, 0xff, 0x70, 0x76, 0xd8, 0x02, 0xdd,
	0xed, 0xe3, 0x89, 0x0a, 0x4e, 0x26, 0x2a, 0xf8, 0x39, 0x51, 0xc1, 0xfe, 0x54, 0x95, 0x4e, 0xa6,
	0xaa, 0xf4, 0x7d, 0xaa, 0x4a, 0x2f, 0xef, 0x13, 0x8b, 0x0f, 0x7d, 0x13, 0xf5, 0xa9, 0xad, 0xe1,
	0x80, 0x71, 0xa3, 0x3f, 0xd2, 0x70, 0xd0, 0x8e, 0x76, 0x94, 0x4d, 0x07, 0xfe, 0x18, 0xb3, 0x74,
	0x57, 0x45, 0x8b, 0xca, 0x2c, 0x46, 0x4f, 0xf1, 0xc1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07,
	0x94, 0xe5, 0x56, 0x5e, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Attest submits a signed vote for a checkpoint
	Attest(ctx context.Context, in *MsgAttest, opts ...grpc.CallOption) (*MsgAttestResponse, error)
	// JoinAttesterSet opts a validator into the attester set
	JoinAttesterSet(ctx context.Context, in *MsgJoinAttesterSet, opts ...grpc.CallOption) (*MsgJoinAttesterSetResponse, error)
	// LeaveAttesterSet opts a validator out of the attester set
	LeaveAttesterSet(ctx context.Context, in *MsgLeaveAttesterSet, opts ...grpc.CallOption) (*MsgLeaveAttesterSetResponse, error)
	// UpdateParams updates the module parameters
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Attest(ctx context.Context, in *MsgAttest, opts ...grpc.CallOption) (*MsgAttestResponse, error) {
	out := new(MsgAttestResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Msg/Attest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinAttesterSet(ctx context.Context, in *MsgJoinAttesterSet, opts ...grpc.CallOption) (*MsgJoinAttesterSetResponse, error) {
	out := new(MsgJoinAttesterSetResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Msg/JoinAttesterSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaveAttesterSet(ctx context.Context, in *MsgLeaveAttesterSet, opts ...grpc.CallOption) (*MsgLeaveAttesterSetResponse, error) {
	out := new(MsgLeaveAttesterSetResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Msg/LeaveAttesterSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/evabci.network.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Attest submits a signed vote for a checkpoint
	Attest(context.Context, *MsgAttest) (*MsgAttestResponse, error)
	// JoinAttesterSet opts a validator into the attester set
	JoinAttesterSet(context.Context, *MsgJoinAttesterSet) (*MsgJoinAttesterSetResponse, error)
	// LeaveAttesterSet opts a validator out of the attester set
	LeaveAttesterSet(context.Context, *MsgLeaveAttesterSet) (*MsgLeaveAttesterSetResponse, error)
	// UpdateParams updates the module parameters
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Attest(ctx context.Context, req *MsgAttest) (*MsgAttestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attest not implemented")
}
func (*UnimplementedMsgServer) JoinAttesterSet(ctx context.Context, req *MsgJoinAttesterSet) (*MsgJoinAttesterSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinAttesterSet not implemented")
}
func (*UnimplementedMsgServer) LeaveAttesterSet(ctx context.Context, req *MsgLeaveAttesterSet) (*MsgLeaveAttesterSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveAttesterSet not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Attest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAttest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Attest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Msg/Attest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Attest(ctx, req.(*MsgAttest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinAttesterSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinAttesterSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinAttesterSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Msg/JoinAttesterSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinAttesterSet(ctx, req.(*MsgJoinAttesterSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaveAttesterSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaveAttesterSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaveAttesterSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Msg/LeaveAttesterSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaveAttesterSet(ctx, req.(*MsgLeaveAttesterSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.network.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evabci.network.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attest",
			Handler:    _Msg_Attest_Handler,
		},
		{
			MethodName: "JoinAttesterSet",
			Handler:    _Msg_JoinAttesterSet_Handler,
		},
		{
			MethodName: "LeaveAttesterSet",
			Handler:    _Msg_LeaveAttesterSet_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evabci/network/v1/tx.proto",
}

func (m *MsgAttest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAttest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAttest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vote) > 0 {
		i -= len(m.Vote)
		copy(dAtA[i:], m.Vote)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Vote)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAttestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAttestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAttestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgJoinAttesterSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinAttesterSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinAttesterSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinAttesterSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinAttesterSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinAttesterSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLeaveAttesterSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveAttesterSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveAttesterSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLeaveAttesterSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveAttesterSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveAttesterSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAttest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = len(m.Vote)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAttestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgJoinAttesterSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinAttesterSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLeaveAttesterSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLeaveAttesterSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAttest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAttest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAttest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vote = append(m.Vote[:0], dAtA[iNdEx:postIndex]...)
			if m.Vote == nil {
				m.Vote = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAttestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAttestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAttestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinAttesterSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinAttesterSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinAttesterSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinAttesterSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinAttesterSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinAttesterSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveAttesterSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveAttesterSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveAttesterSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveAttesterSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveAttesterSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveAttesterSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

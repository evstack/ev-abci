// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evabci/migrationmngr/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryIsMigratingRequest is request type for the Query/IsMigrating RPC method.
type QueryIsMigratingRequest struct {
}

func (m *QueryIsMigratingRequest) Reset()         { *m = QueryIsMigratingRequest{} }
func (m *QueryIsMigratingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsMigratingRequest) ProtoMessage()    {}
func (*QueryIsMigratingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba2bc51c8cb9cb, []int{0}
}
func (m *QueryIsMigratingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsMigratingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsMigratingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsMigratingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsMigratingRequest.Merge(m, src)
}
func (m *QueryIsMigratingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsMigratingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsMigratingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsMigratingRequest proto.InternalMessageInfo

// QueryIsMigratingResponse is response type for the Query/IsMigrating RPC method.
type QueryIsMigratingResponse struct {
	// is_migrating indicates whether the chain is migrating to Evolve.
	IsMigrating bool `protobuf:"varint,1,opt,name=is_migrating,json=isMigrating,proto3" json:"is_migrating,omitempty"`
	// start_block_height is the block height at which the migration will start.
	StartBlockHeight uint64 `protobuf:"varint,2,opt,name=start_block_height,json=startBlockHeight,proto3" json:"start_block_height,omitempty"`
	// end_block_height is the block height at which the migration will end.
	EndBlockHeight uint64 `protobuf:"varint,3,opt,name=end_block_height,json=endBlockHeight,proto3" json:"end_block_height,omitempty"`
}

func (m *QueryIsMigratingResponse) Reset()         { *m = QueryIsMigratingResponse{} }
func (m *QueryIsMigratingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsMigratingResponse) ProtoMessage()    {}
func (*QueryIsMigratingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba2bc51c8cb9cb, []int{1}
}
func (m *QueryIsMigratingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsMigratingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsMigratingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsMigratingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsMigratingResponse.Merge(m, src)
}
func (m *QueryIsMigratingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsMigratingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsMigratingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsMigratingResponse proto.InternalMessageInfo

func (m *QueryIsMigratingResponse) GetIsMigrating() bool {
	if m != nil {
		return m.IsMigrating
	}
	return false
}

func (m *QueryIsMigratingResponse) GetStartBlockHeight() uint64 {
	if m != nil {
		return m.StartBlockHeight
	}
	return 0
}

func (m *QueryIsMigratingResponse) GetEndBlockHeight() uint64 {
	if m != nil {
		return m.EndBlockHeight
	}
	return 0
}

// QuerySequencerRequest is request type for the Query/Sequencer RPC method.
type QuerySequencerRequest struct {
}

func (m *QuerySequencerRequest) Reset()         { *m = QuerySequencerRequest{} }
func (m *QuerySequencerRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySequencerRequest) ProtoMessage()    {}
func (*QuerySequencerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba2bc51c8cb9cb, []int{2}
}
func (m *QuerySequencerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySequencerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySequencerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySequencerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySequencerRequest.Merge(m, src)
}
func (m *QuerySequencerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySequencerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySequencerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySequencerRequest proto.InternalMessageInfo

// QuerySequencerResponse is response type for the Query/Sequencer RPC method.
type QuerySequencerResponse struct {
	// sequencer is the requested sequencer.
	Sequencer Sequencer `protobuf:"bytes,1,opt,name=sequencer,proto3" json:"sequencer"`
}

func (m *QuerySequencerResponse) Reset()         { *m = QuerySequencerResponse{} }
func (m *QuerySequencerResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySequencerResponse) ProtoMessage()    {}
func (*QuerySequencerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba2bc51c8cb9cb, []int{3}
}
func (m *QuerySequencerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySequencerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySequencerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySequencerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySequencerResponse.Merge(m, src)
}
func (m *QuerySequencerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySequencerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySequencerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySequencerResponse proto.InternalMessageInfo

func (m *QuerySequencerResponse) GetSequencer() Sequencer {
	if m != nil {
		return m.Sequencer
	}
	return Sequencer{}
}

// QueryAttestersRequest is request type for the Query/Attesters RPC method.
type QueryAttestersRequest struct {
}

func (m *QueryAttestersRequest) Reset()         { *m = QueryAttestersRequest{} }
func (m *QueryAttestersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAttestersRequest) ProtoMessage()    {}
func (*QueryAttestersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba2bc51c8cb9cb, []int{4}
}
func (m *QueryAttestersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestersRequest.Merge(m, src)
}
func (m *QueryAttestersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestersRequest proto.InternalMessageInfo

// QueryAttestersResponse is response type for the Query/Attesters RPC method.
type QueryAttestersResponse struct {
	// attesters is the list of attesters.
	Attesters []Attester `protobuf:"bytes,1,rep,name=attesters,proto3" json:"attesters"`
}

func (m *QueryAttestersResponse) Reset()         { *m = QueryAttestersResponse{} }
func (m *QueryAttestersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAttestersResponse) ProtoMessage()    {}
func (*QueryAttestersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba2bc51c8cb9cb, []int{5}
}
func (m *QueryAttestersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestersResponse.Merge(m, src)
}
func (m *QueryAttestersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestersResponse proto.InternalMessageInfo

func (m *QueryAttestersResponse) GetAttesters() []Attester {
	if m != nil {
		return m.Attesters
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryIsMigratingRequest)(nil), "evabci.migrationmngr.v1.QueryIsMigratingRequest")
	proto.RegisterType((*QueryIsMigratingResponse)(nil), "evabci.migrationmngr.v1.QueryIsMigratingResponse")
	proto.RegisterType((*QuerySequencerRequest)(nil), "evabci.migrationmngr.v1.QuerySequencerRequest")
	proto.RegisterType((*QuerySequencerResponse)(nil), "evabci.migrationmngr.v1.QuerySequencerResponse")
	proto.RegisterType((*QueryAttestersRequest)(nil), "evabci.migrationmngr.v1.QueryAttestersRequest")
	proto.RegisterType((*QueryAttestersResponse)(nil), "evabci.migrationmngr.v1.QueryAttestersResponse")
}

func init() {
	proto.RegisterFile("evabci/migrationmngr/v1/query.proto", fileDescriptor_e5ba2bc51c8cb9cb)
}

var fileDescriptor_e5ba2bc51c8cb9cb = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x8b, 0x13, 0x31,
	0x18, 0xc6, 0x9b, 0xad, 0x8a, 0x4d, 0x45, 0xd6, 0xa0, 0xb6, 0x16, 0x19, 0xbb, 0xa3, 0x62, 0x59,
	0xdc, 0x89, 0xad, 0xe0, 0xdd, 0x9e, 0xfc, 0x83, 0xa0, 0xf5, 0xe6, 0xa5, 0xa4, 0xd3, 0x97, 0x34,
	0x6c, 0x27, 0xe9, 0x4e, 0xd2, 0x81, 0xbd, 0xfa, 0x09, 0x04, 0x11, 0xbc, 0x7a, 0xf3, 0xe8, 0xc7,
	0xd8, 0xe3, 0x82, 0x17, 0x4f, 0xa2, 0xad, 0xe0, 0xd7, 0x90, 0x66, 0xfe, 0xec, 0x74, 0x96, 0x71,
	0xbb, 0x97, 0x32, 0xbc, 0xef, 0xf3, 0xbe, 0xcf, 0xaf, 0x79, 0x12, 0x7c, 0x17, 0x22, 0x36, 0xf2,
	0x05, 0x0d, 0x04, 0x0f, 0x99, 0x11, 0x4a, 0x06, 0x92, 0x87, 0x34, 0xea, 0xd2, 0x83, 0x39, 0x84,
	0x87, 0xde, 0x2c, 0x54, 0x46, 0x91, 0x46, 0x2c, 0xf2, 0xd6, 0x44, 0x5e, 0xd4, 0x6d, 0x5d, 0x63,
	0x81, 0x90, 0x8a, 0xda, 0xdf, 0x58, 0xdb, 0xba, 0xce, 0x15, 0x57, 0xf6, 0x93, 0xae, 0xbe, 0x92,
	0xea, 0x6d, 0xae, 0x14, 0x9f, 0x02, 0x65, 0x33, 0x41, 0x99, 0x94, 0xca, 0xd8, 0x35, 0x3a, 0xe9,
	0x96, 0x42, 0x98, 0xc3, 0x19, 0x24, 0x22, 0xf7, 0x16, 0x6e, 0xbc, 0x59, 0x31, 0x3d, 0xd7, 0xaf,
	0x62, 0x99, 0xe4, 0x03, 0x38, 0x98, 0x83, 0x36, 0xee, 0x27, 0x84, 0x9b, 0xa7, 0x7b, 0x7a, 0xa6,
	0xa4, 0x06, 0xb2, 0x83, 0xaf, 0x08, 0x3d, 0x0c, 0xd2, 0x7a, 0x13, 0xb5, 0x51, 0xe7, 0xf2, 0xa0,
	0x2e, 0x4e, 0xa4, 0xe4, 0x21, 0x26, 0xda, 0xb0, 0xd0, 0x0c, 0x47, 0x53, 0xe5, 0xef, 0x0f, 0x27,
	0x20, 0xf8, 0xc4, 0x34, 0xb7, 0xda, 0xa8, 0x73, 0x61, 0xb0, 0x6d, 0x3b, 0xfd, 0x55, 0xe3, 0x99,
	0xad, 0x93, 0x0e, 0xde, 0x06, 0x39, 0x5e, 0xd7, 0x56, 0xad, 0xf6, 0x2a, 0xc8, 0x71, 0x4e, 0xe9,
	0x36, 0xf0, 0x0d, 0x8b, 0xf5, 0x76, 0xc5, 0x29, 0x7d, 0x08, 0x53, 0x60, 0xc0, 0x37, 0x8b, 0x8d,
	0x84, 0xf6, 0x25, 0xae, 0xe9, 0xb4, 0x68, 0x51, 0xeb, 0x3d, 0xd7, 0x2b, 0x39, 0x7e, 0x2f, 0x1b,
	0xef, 0xd7, 0x8e, 0x7e, 0xde, 0xa9, 0x7c, 0xfd, 0xfb, 0x6d, 0x17, 0x0d, 0x4e, 0xe6, 0x33, 0xff,
	0xa7, 0xc6, 0x80, 0x36, 0x10, 0xea, 0xd4, 0x7f, 0x9c, 0xf8, 0xe7, 0x1a, 0x89, 0xff, 0x0b, 0x5c,
	0x63, 0x69, 0xb1, 0x89, 0xda, 0xd5, 0x4e, 0xbd, 0xb7, 0x53, 0xea, 0x9f, 0x8e, 0xaf, 0xd9, 0x67,
	0xe3, 0xbd, 0xdf, 0x55, 0x7c, 0xd1, 0xda, 0x90, 0x2f, 0x08, 0xd7, 0x73, 0xd9, 0x90, 0x47, 0xa5,
	0x2b, 0x4b, 0x22, 0x6e, 0x75, 0xcf, 0x31, 0x11, 0xff, 0x15, 0x77, 0xef, 0xfd, 0xf7, 0x3f, 0x1f,
	0xb7, 0x1e, 0x90, 0xfb, 0xb4, 0xec, 0x7a, 0xe5, 0xef, 0x05, 0xf9, 0x8c, 0x70, 0x2d, 0x3b, 0x50,
	0xe2, 0xfd, 0xdf, 0xaf, 0x98, 0x68, 0x8b, 0x6e, 0xac, 0x4f, 0xe8, 0x76, 0x2d, 0xdd, 0x3d, 0xe2,
	0x96, 0xd2, 0x65, 0x39, 0x5a, 0xb4, 0x2c, 0xaa, 0xb3, 0xd0, 0x8a, 0x61, 0x9f, 0x85, 0x76, 0xea,
	0x0e, 0x6c, 0x80, 0x96, 0x65, 0xdc, 0x7f, 0x7d, 0xb4, 0x70, 0xd0, 0xf1, 0xc2, 0x41, 0xbf, 0x16,
	0x0e, 0xfa, 0xb0, 0x74, 0x2a, 0xc7, 0x4b, 0xa7, 0xf2, 0x63, 0xe9, 0x54, 0xde, 0x3d, 0xe1, 0xc2,
	0x4c, 0xe6, 0x23, 0xcf, 0x57, 0x01, 0x85, 0x48, 0x1b, 0xe6, 0xef, 0x53, 0x88, 0xf6, 0xe2, 0x85,
	0x6a, 0x3c, 0x9f, 0x82, 0x2e, 0x2c, 0xb6, 0xaf, 0x7d, 0x74, 0xc9, 0x3e, 0xf7, 0xc7, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x70, 0x48, 0xbf, 0x54, 0x9a, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// IsMigrating queries the sequencer changes.
	IsMigrating(ctx context.Context, in *QueryIsMigratingRequest, opts ...grpc.CallOption) (*QueryIsMigratingResponse, error)
	// Sequencer queries the sequencer.
	Sequencer(ctx context.Context, in *QuerySequencerRequest, opts ...grpc.CallOption) (*QuerySequencerResponse, error)
	// Attesters queries the list of attesters.
	Attesters(ctx context.Context, in *QueryAttestersRequest, opts ...grpc.CallOption) (*QueryAttestersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) IsMigrating(ctx context.Context, in *QueryIsMigratingRequest, opts ...grpc.CallOption) (*QueryIsMigratingResponse, error) {
	out := new(QueryIsMigratingResponse)
	err := c.cc.Invoke(ctx, "/evabci.migrationmngr.v1.Query/IsMigrating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sequencer(ctx context.Context, in *QuerySequencerRequest, opts ...grpc.CallOption) (*QuerySequencerResponse, error) {
	out := new(QuerySequencerResponse)
	err := c.cc.Invoke(ctx, "/evabci.migrationmngr.v1.Query/Sequencer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Attesters(ctx context.Context, in *QueryAttestersRequest, opts ...grpc.CallOption) (*QueryAttestersResponse, error) {
	out := new(QueryAttestersResponse)
	err := c.cc.Invoke(ctx, "/evabci.migrationmngr.v1.Query/Attesters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// IsMigrating queries the sequencer changes.
	IsMigrating(context.Context, *QueryIsMigratingRequest) (*QueryIsMigratingResponse, error)
	// Sequencer queries the sequencer.
	Sequencer(context.Context, *QuerySequencerRequest) (*QuerySequencerResponse, error)
	// Attesters queries the list of attesters.
	Attesters(context.Context, *QueryAttestersRequest) (*QueryAttestersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) IsMigrating(ctx context.Context, req *QueryIsMigratingRequest) (*QueryIsMigratingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMigrating not implemented")
}
func (*UnimplementedQueryServer) Sequencer(ctx context.Context, req *QuerySequencerRequest) (*QuerySequencerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sequencer not implemented")
}
func (*UnimplementedQueryServer) Attesters(ctx context.Context, req *QueryAttestersRequest) (*QueryAttestersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attesters not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_IsMigrating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsMigratingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsMigrating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.migrationmngr.v1.Query/IsMigrating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsMigrating(ctx, req.(*QueryIsMigratingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sequencer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySequencerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sequencer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.migrationmngr.v1.Query/Sequencer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sequencer(ctx, req.(*QuerySequencerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Attesters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttestersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Attesters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.migrationmngr.v1.Query/Attesters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Attesters(ctx, req.(*QueryAttestersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evabci.migrationmngr.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsMigrating",
			Handler:    _Query_IsMigrating_Handler,
		},
		{
			MethodName: "Sequencer",
			Handler:    _Query_Sequencer_Handler,
		},
		{
			MethodName: "Attesters",
			Handler:    _Query_Attesters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evabci/migrationmngr/v1/query.proto",
}

func (m *QueryIsMigratingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsMigratingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsMigratingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIsMigratingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsMigratingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsMigratingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.StartBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.IsMigrating {
		i--
		if m.IsMigrating {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySequencerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySequencerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySequencerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySequencerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySequencerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySequencerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Sequencer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAttestersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAttestersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attesters) > 0 {
		for iNdEx := len(m.Attesters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attesters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryIsMigratingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIsMigratingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsMigrating {
		n += 2
	}
	if m.StartBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.StartBlockHeight))
	}
	if m.EndBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.EndBlockHeight))
	}
	return n
}

func (m *QuerySequencerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySequencerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sequencer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAttestersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAttestersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attesters) > 0 {
		for _, e := range m.Attesters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryIsMigratingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsMigratingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsMigratingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsMigratingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsMigratingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsMigratingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMigrating", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMigrating = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockHeight", wireType)
			}
			m.StartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockHeight", wireType)
			}
			m.EndBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySequencerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySequencerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySequencerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySequencerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySequencerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySequencerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequencer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sequencer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attesters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attesters = append(m.Attesters, Attester{})
			if err := m.Attesters[len(m.Attesters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

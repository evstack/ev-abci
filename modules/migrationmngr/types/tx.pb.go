// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evabci/migrationmngr/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgMigrateToEvolve is the Msg/MsgMigrateToEvolve request type.
type MsgMigrateToEvolve struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// block height that trigger the Evolve migration.
	// When IBC is enabled, the migration can take several blocks to complete.
	// This is the block height at which the migration will be triggered.
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// sequencer is the pubkey that will become new sequencer.
	Sequencer Sequencer `protobuf:"bytes,3,opt,name=sequencer,proto3" json:"sequencer"`
	// attesters is the list of attesters that will attest to blocks.
	Attesters []Attester `protobuf:"bytes,4,rep,name=attesters,proto3" json:"attesters"`
}

func (m *MsgMigrateToEvolve) Reset()         { *m = MsgMigrateToEvolve{} }
func (m *MsgMigrateToEvolve) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateToEvolve) ProtoMessage()    {}
func (*MsgMigrateToEvolve) Descriptor() ([]byte, []int) {
	return fileDescriptor_33fc897f55490d9b, []int{0}
}
func (m *MsgMigrateToEvolve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateToEvolve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateToEvolve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateToEvolve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateToEvolve.Merge(m, src)
}
func (m *MsgMigrateToEvolve) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateToEvolve) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateToEvolve.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateToEvolve proto.InternalMessageInfo

func (m *MsgMigrateToEvolve) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgMigrateToEvolve) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgMigrateToEvolve) GetSequencer() Sequencer {
	if m != nil {
		return m.Sequencer
	}
	return Sequencer{}
}

func (m *MsgMigrateToEvolve) GetAttesters() []Attester {
	if m != nil {
		return m.Attesters
	}
	return nil
}

// MsgMigrateToEvolveResponse defines the response structure for executing a
// MsgMigrateToEvolve message.
type MsgMigrateToEvolveResponse struct {
}

func (m *MsgMigrateToEvolveResponse) Reset()         { *m = MsgMigrateToEvolveResponse{} }
func (m *MsgMigrateToEvolveResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateToEvolveResponse) ProtoMessage()    {}
func (*MsgMigrateToEvolveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33fc897f55490d9b, []int{1}
}
func (m *MsgMigrateToEvolveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateToEvolveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateToEvolveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateToEvolveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateToEvolveResponse.Merge(m, src)
}
func (m *MsgMigrateToEvolveResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateToEvolveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateToEvolveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateToEvolveResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgMigrateToEvolve)(nil), "evabci.migrationmngr.v1.MsgMigrateToEvolve")
	proto.RegisterType((*MsgMigrateToEvolveResponse)(nil), "evabci.migrationmngr.v1.MsgMigrateToEvolveResponse")
}

func init() { proto.RegisterFile("evabci/migrationmngr/v1/tx.proto", fileDescriptor_33fc897f55490d9b) }

var fileDescriptor_33fc897f55490d9b = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x31, 0x6b, 0xdb, 0x40,
	0x14, 0xc7, 0x7d, 0x71, 0x5a, 0xd0, 0xb9, 0x50, 0x2a, 0x02, 0x51, 0x45, 0x51, 0x15, 0x67, 0x11,
	0x2e, 0xd1, 0x11, 0x07, 0x3c, 0x74, 0x8b, 0xa1, 0x50, 0x5a, 0x0c, 0x45, 0xe9, 0xd4, 0x25, 0x48,
	0xf2, 0xe3, 0x74, 0xc4, 0xd2, 0xb9, 0xf7, 0x4e, 0xa2, 0xd9, 0xda, 0x8e, 0x9d, 0xfa, 0x31, 0x3a,
	0x7a, 0xe8, 0x07, 0xe8, 0x98, 0x31, 0x74, 0xea, 0x54, 0x8a, 0x3d, 0xf8, 0x6b, 0x14, 0x4b, 0x4a,
	0x4d, 0x22, 0x34, 0x74, 0x11, 0xba, 0xff, 0xfb, 0xbd, 0x77, 0xf7, 0xfe, 0xfc, 0xa9, 0x0b, 0x45,
	0x18, 0xc5, 0x82, 0xa5, 0x82, 0xab, 0x50, 0x0b, 0x99, 0xa5, 0x19, 0x57, 0xac, 0x38, 0x66, 0xfa,
	0x83, 0x3f, 0x57, 0x52, 0x4b, 0x73, 0xbf, 0x22, 0xfc, 0x5b, 0x84, 0x5f, 0x1c, 0xdb, 0x8f, 0xc2,
	0x54, 0x64, 0x92, 0x95, 0xdf, 0x8a, 0xb5, 0xf7, 0x63, 0x89, 0xa9, 0x44, 0x96, 0x22, 0xdf, 0xcc,
	0x48, 0x91, 0xd7, 0x85, 0xc7, 0x55, 0xe1, 0xbc, 0x3c, 0xb1, 0xea, 0x50, 0x97, 0xf6, 0xb8, 0xe4,
	0xb2, 0xd2, 0x37, 0x7f, 0xb5, 0x7a, 0xd8, 0xfa, 0xae, 0xcb, 0x39, 0xd4, 0xad, 0xfd, 0x1f, 0x3b,
	0xd4, 0x9c, 0x20, 0x9f, 0x94, 0x0c, 0xbc, 0x95, 0x2f, 0x0a, 0x39, 0x2b, 0xc0, 0x1c, 0x51, 0x23,
	0xcc, 0x75, 0x22, 0x95, 0xd0, 0x97, 0x16, 0x71, 0x89, 0x67, 0x8c, 0xad, 0x9f, 0xdf, 0x8f, 0xf6,
	0xea, 0x6b, 0x4f, 0xa7, 0x53, 0x05, 0x88, 0x67, 0x5a, 0x89, 0x8c, 0x07, 0x5b, 0xd4, 0x3c, 0xa0,
	0x0f, 0xa2, 0x99, 0x8c, 0x2f, 0xce, 0x13, 0x10, 0x3c, 0xd1, 0xd6, 0x8e, 0x4b, 0xbc, 0xdd, 0xa0,
	0x57, 0x6a, 0x2f, 0x4b, 0xc9, 0x7c, 0x4d, 0x0d, 0x84, 0xf7, 0x39, 0x64, 0x31, 0x28, 0xab, 0xeb,
	0x12, 0xaf, 0x37, 0xec, 0xfb, 0x2d, 0x06, 0xf9, 0x67, 0x37, 0xe4, 0xd8, 0xb8, 0xfa, 0xfd, 0xb4,
	0xf3, 0x6d, 0xbd, 0x18, 0x90, 0x60, 0xdb, 0x6f, 0xbe, 0xa2, 0x46, 0xa8, 0x35, 0xa0, 0x06, 0x85,
	0xd6, 0xae, 0xdb, 0xf5, 0x7a, 0xc3, 0x83, 0xd6, 0x61, 0xa7, 0x35, 0x79, 0x6b, 0xd6, 0xbf, 0xf6,
	0xe7, 0xa3, 0xcf, 0xeb, 0xc5, 0x60, 0xbb, 0xcb, 0x97, 0xf5, 0x62, 0x70, 0xd8, 0xf0, 0xae, 0xe9,
	0x55, 0xff, 0x09, 0xb5, 0x9b, 0x6a, 0x00, 0x38, 0x97, 0x19, 0xc2, 0xf0, 0x13, 0xa1, 0xdd, 0x09,
	0x72, 0x13, 0xe9, 0xc3, 0xbb, 0x26, 0x3f, 0x6b, 0x7d, 0x69, 0x73, 0x9e, 0x7d, 0xf2, 0x1f, 0xf0,
	0xcd, 0xe5, 0xf6, 0xbd, 0x8f, 0x9b, 0x25, 0xc7, 0x6f, 0xae, 0x96, 0x0e, 0xb9, 0x5e, 0x3a, 0xe4,
	0xcf, 0xd2, 0x21, 0x5f, 0x57, 0x4e, 0xe7, 0x7a, 0xe5, 0x74, 0x7e, 0xad, 0x9c, 0xce, 0xbb, 0x11,
	0x17, 0x3a, 0xc9, 0x23, 0x3f, 0x96, 0x29, 0x83, 0x02, 0x75, 0x18, 0x5f, 0x30, 0x28, 0x8e, 0xaa,
	0xdc, 0xc8, 0x69, 0x3e, 0x03, 0xbc, 0x93, 0x9f, 0x32, 0x3c, 0xd1, 0xfd, 0x32, 0x3d, 0x27, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x3f, 0x98, 0xdb, 0xfc, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// MigrateToEvolve defines a (governance) operation for the migration to Evolve. The authority defaults to the x/gov module account.
	MigrateToEvolve(ctx context.Context, in *MsgMigrateToEvolve, opts ...grpc.CallOption) (*MsgMigrateToEvolveResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MigrateToEvolve(ctx context.Context, in *MsgMigrateToEvolve, opts ...grpc.CallOption) (*MsgMigrateToEvolveResponse, error) {
	out := new(MsgMigrateToEvolveResponse)
	err := c.cc.Invoke(ctx, "/evabci.migrationmngr.v1.Msg/MigrateToEvolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// MigrateToEvolve defines a (governance) operation for the migration to Evolve. The authority defaults to the x/gov module account.
	MigrateToEvolve(context.Context, *MsgMigrateToEvolve) (*MsgMigrateToEvolveResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MigrateToEvolve(ctx context.Context, req *MsgMigrateToEvolve) (*MsgMigrateToEvolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateToEvolve not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MigrateToEvolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMigrateToEvolve)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MigrateToEvolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evabci.migrationmngr.v1.Msg/MigrateToEvolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MigrateToEvolve(ctx, req.(*MsgMigrateToEvolve))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evabci.migrationmngr.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MigrateToEvolve",
			Handler:    _Msg_MigrateToEvolve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evabci/migrationmngr/v1/tx.proto",
}

func (m *MsgMigrateToEvolve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateToEvolve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateToEvolve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attesters) > 0 {
		for iNdEx := len(m.Attesters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attesters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.Sequencer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMigrateToEvolveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateToEvolveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateToEvolveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMigrateToEvolve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = m.Sequencer.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Attesters) > 0 {
		for _, e := range m.Attesters {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMigrateToEvolveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMigrateToEvolve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateToEvolve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateToEvolve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequencer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sequencer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attesters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attesters = append(m.Attesters, Attester{})
			if err := m.Attesters[len(m.Attesters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMigrateToEvolveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateToEvolveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateToEvolveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

syntax = "proto3";
package evabci.migrationmngr.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "evabci/migrationmngr/v1/types.proto";

option go_package = "github.com/evstack/ev-abci/modules/migrationmngr/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // MigrateToEvolve defines a (governance) operation for the migration to Evolve. The authority defaults to the x/gov module account.
  rpc MigrateToEvolve(MsgMigrateToEvolve) returns (MsgMigrateToEvolveResponse);
}

// MsgMigrateToEvolve is the Msg/MsgMigrateToEvolve request type.
message MsgMigrateToEvolve {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "migrationmngr/v1/MsgMigrateToEvolve";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // block height that trigger the Evolve migration.
  // When IBC is enabled, the migration can take several blocks to complete.
  // This is the block height at which the migration will be triggered.
  uint64 block_height = 2;

  // sequencer is the pubkey that will become new sequencer.
  Sequencer sequencer = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  // attesters is the list of attesters that will attest to blocks.
  repeated Attester attesters = 4
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgMigrateToEvolveResponse defines the response structure for executing a
// MsgMigrateToEvolve message.
message MsgMigrateToEvolveResponse {};

services:
  binaries:
    build:
      context: ../../..
      dockerfile: .github/compose/docker/Dockerfile.binaries
    image: integration-tests-binaries:latest
    container_name: integration-test-binaries
    command: ["true"]
    networks:
      - ibc-test

  # Local Data Availability (DA) service
  local-da:
    build:
      context: ../../..
      dockerfile: .github/compose/docker/Dockerfile.local-da
      args:
        EV_NODE_REF: ${EV_NODE_REF:-main}
    container_name: rollkit-local-da
    command: ["local-da", "-listen-all"]
    ports:
      - "7980:7980"
    networks:
      - ibc-test

  # Cosmos Hub (Gaia) chain
  gaia-chain:
    image: ghcr.io/cosmos/gaia:${GAIA_VERSION:-v25.1.0}
    container_name: gaia-chain
    environment:
      - CHAIN_ID=cosmos-local
      - MONIKER=cosmos-local
      - KEYRING_BACKEND=test
      - GAIAD_HOME=/root/.gaia_local
      # default testing mnemonic; override with env GAIA_MNEMONIC if needed
      - GAIA_MNEMONIC=${GAIA_MNEMONIC:-abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about}
    ports:
      - "26657:26657"  # RPC
      - "26656:26656"  # P2P
      - "9090:9090"    # gRPC
      - "1317:1317"    # API
    entrypoint: /bin/sh -lc
    command: |
      '
      set -euo pipefail
      export CHAIN_ID=${CHAIN_ID}
      export MONIKER=${MONIKER}
      export KEYRING_BACKEND=${KEYRING_BACKEND}
      export GAIAD_HOME=${GAIAD_HOME}
      
      echo "Initializing Gaia ${CHAIN_ID} at ${GAIAD_HOME}"
      gaiad init ${MONIKER} --chain-id ${CHAIN_ID}
      
      echo "Recovering validator key"
      echo "${GAIA_MNEMONIC}" | gaiad keys add validator \
        --keyring-backend ${KEYRING_BACKEND} \
        --recover >/dev/null 2>&1
      VAL_ADDR=$(gaiad keys show validator -a --keyring-backend ${KEYRING_BACKEND})
      
      echo "Adding genesis account and gentx"
      gaiad genesis add-genesis-account ${VAL_ADDR} 1000000000stake
      gaiad genesis gentx validator 100000000stake --fees 1stake --chain-id ${CHAIN_ID} --keyring-backend ${KEYRING_BACKEND}
      gaiad genesis collect-gentxs
      
      echo "Setting app config"
      gaiad config set app minimum-gas-prices 0.025stake
      gaiad config set app grpc.enable true
      
      echo "Starting gaiad..."
      exec gaiad start \
        --rpc.laddr tcp://0.0.0.0:26657 \
        --p2p.laddr tcp://0.0.0.0:26656 \
        --grpc.address 0.0.0.0:9090 \
        --api.enable \
        --log_format=json
      '
    healthcheck:
      test: ["CMD", "sh", "-lc", "gaiad status --node http://localhost:26657 >/dev/null 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ibc-test

  # GM chain using prebuilt gmd binary and prepared home from the workflow
  gm-chain:
    build:
      context: ../../..
      dockerfile: .github/compose/docker/Dockerfile.gm
    container_name: gm-chain
    environment:
      - GM_HOME_IN_CONTAINER=/home/gm/.gm
      - CHAIN_ID=gm
      - MONIKER=gm-local
      - ATTESTER_MODE=${ATTESTER_MODE:-false}
    depends_on:
      local-da:
        condition: service_healthy
    volumes:
      # Mount host gmd binary (read-only) and GM home prepared by workflow
      - ${GM_BINARY_PATH}:/usr/local/bin/gmd:ro
      - ${GMD_HOME}:${GM_HOME_IN_CONTAINER}
      # Mount gm source (read-only) for ignite evolve init inside container
      - ../../gm:/home/gm/gm:ro
    ports:
      - "26757:26757"  # RPC
      - "26756:26756"  # P2P
      - "9190:9190"    # gRPC
      - "1417:1417"    # API
    entrypoint: ["/home/gm/run-gm.sh"]
    healthcheck:
      test: ["CMD", "sh", "-lc", "curl -sf http://localhost:26757/status >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - ibc-test

networks:
  ibc-test:
    driver: bridge

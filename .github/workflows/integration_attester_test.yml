name: integration_attester_test

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  integration:
    name: Setup Evolve Chain (scaffold & build)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DO_NOT_TRACK: true
      EVNODE_VERSION: "v1.0.0-beta.2.0.20250908090838-0584153217ed"
      EVNODE_DA_VERSION: "v1.0.0-beta.1"
      IGNITE_VERSION: "v29.3.1"
      IGNITE_EVOLVE_APP_VERSION: "main"
      GAIAD_VERSION: "v24.0.0"
      TASTORA_REF: "main"

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Export GOPATH_BIN
        run: echo "GOPATH_BIN=$(go env GOPATH)/bin" >> $GITHUB_ENV

      - name: Cache Ignite CLI
        id: cache-ignite
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/bin/ignite
            ~/.ignite
          key: ignite-${{ runner.os }}-${{ runner.arch }}-${{ env.IGNITE_VERSION }}

      - name: Install Ignite CLI
        if: steps.cache-ignite.outputs.cache-hit != 'true'
        run: |
          echo "Installing Ignite CLI ${IGNITE_VERSION}"
          curl -sSL https://get.ignite.com/cli@$IGNITE_VERSION! | bash

      - name: Package Ignite for compose
        run: |
          set -euo pipefail
          mkdir -p .github/integration-tests/bin .github/integration-tests/ignite-home
          # Copy ignite binary
          cp /usr/local/bin/ignite .github/integration-tests/bin/ignite
          chmod +x .github/integration-tests/bin/ignite
          # Copy Ignite home (plugins/config/cache)
          cp -a "$HOME/.ignite/." .github/integration-tests/ignite-home/

      - name: Restore Gmd binary cache
        id: cache-gmd
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.GOPATH_BIN }}/gmd
          key: gmd-${{ runner.os }}-${{ runner.arch }}-${{ env.EVNODE_VERSION }}-${{ env.IGNITE_VERSION }}-${{ env.IGNITE_EVOLVE_APP_VERSION }}-${{ hashFiles('go.mod','go.sum','*.go','pkg/**/*.go','server/**/*.go','modules/**/*.go') }}
          restore-keys: |
            gmd-${{ runner.os }}-${{ runner.arch }}-${{ env.EVNODE_VERSION }}-${{ env.IGNITE_VERSION }}-${{ env.IGNITE_EVOLVE_APP_VERSION }}-

      - name: Build Gmd Chain binary with Ignite
        if: steps.cache-gmd.outputs.cache-hit != 'true'
        run: |
          echo "No cached gmd found. Scaffolding and building..."
          echo "Scaffolding chain gm and adding evolve app (${IGNITE_EVOLVE_APP_VERSION})"
          ignite scaffold chain gm --no-module --skip-git --address-prefix gm
          cd gm
          ignite app install github.com/ignite/apps/evolve@$IGNITE_EVOLVE_APP_VERSION
          ignite evolve add
          echo "Replacing modules (ev-node @ ${EVNODE_VERSION}, ev-abci -> local)"
          CURRENT_DIR=$(pwd)
          GO_EXECUTION_ABCI_DIR=$(dirname "$CURRENT_DIR")
          go mod edit -replace github.com/evstack/ev-node=github.com/evstack/ev-node@$EVNODE_VERSION
          go mod edit -replace github.com/evstack/ev-abci=$GO_EXECUTION_ABCI_DIR
          echo "Running go mod tidy"
          go mod tidy
          echo "Building chain with Ignite (skip proto)"
          ignite chain build --skip-proto

      - name: Package gmd for compose
        run: |
          set -euo pipefail
          mkdir -p .github/integration-tests/bin
          BIN_PATH="${GOPATH_BIN}/gmd"; if [ ! -x "$BIN_PATH" ]; then BIN_PATH="$(command -v gmd)"; fi; cp "$BIN_PATH" .github/integration-tests/bin/gmd
          chmod +x .github/integration-tests/bin/gmd

      - name: Save Gmd binary cache
        if: steps.cache-gmd.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.GOPATH_BIN }}/gmd
          key: gmd-${{ runner.os }}-${{ runner.arch }}-${{ env.EVNODE_VERSION }}-${{ env.IGNITE_VERSION }}-${{ env.IGNITE_EVOLVE_APP_VERSION }}-${{ hashFiles('go.mod','go.sum','*.go','pkg/**/*.go','server/**/*.go','modules/**/*.go') }}

#      - name: Build Docker images (compose)
#        run: |
#          set -euo pipefail
#          echo "Building images"
#          docker compose -f .github/integration-tests/docker-compose.yml build --pull
#          docker images | awk 'NR==1 || /integration-tests-binaries/ {print}' || true

      - name: Run integration tests (compose orchestrator)
        run: |
          set -euo pipefail
          bash .github/integration-tests/run-integration-tests.sh --timeout 900

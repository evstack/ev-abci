# Build and runtime stage - compile gmd inside container
FROM golang:1.24-alpine AS builder

# Install build dependencies and ignite
RUN apk add --no-cache gcc musl-dev git curl bash
RUN curl https://get.ignite.com/cli! | bash

# Install evolve plugin in builder stage where Go is available
RUN ignite app install -g github.com/ignite/apps/evolve@main

# Set working directory
WORKDIR /app

# Copy dependencies first
COPY ev-abci ./deps/ev-abci
COPY ev-node ./deps/ev-node
COPY tastora ./deps/tastora

# Copy GM source code
COPY gm .

# Create a temporary go.mod for building that uses the copied dependencies
RUN sed -i 's|github.com/celestiaorg/tastora => ../tastora|github.com/celestiaorg/tastora => ./deps/tastora|g' go.mod && \
    sed -i 's|github.com/evstack/ev-abci => ../ev-abci|github.com/evstack/ev-abci => ./deps/ev-abci|g' go.mod && \
    sed -i 's|github.com/evstack/ev-node => ../ev-node|github.com/evstack/ev-node => ./deps/ev-node|g' go.mod

# Build gmd binary
RUN go build -o gmd ./cmd/gmd

# Runtime stage
FROM alpine:3.18

# Install runtime dependencies
RUN apk add --no-cache ca-certificates curl jq bash sudo netcat-openbsd

# Copy ignite binary with evolve plugin from builder stage
COPY --from=builder /usr/local/bin/ignite /usr/local/bin/ignite
COPY --from=builder /root/.ignite /root/.ignite
RUN chmod +x /usr/local/bin/ignite

# Create gm user
RUN adduser -D -s /bin/bash gm
# Allow gm user to use sudo without password
RUN echo "gm ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Copy ignite configuration to gm user
COPY --from=builder /root/.ignite /home/gm/.ignite
RUN chown -R gm:gm /home/gm/.ignite

# Copy compiled binary from builder stage
COPY --from=builder /app/gmd /usr/local/bin/gmd
RUN chmod +x /usr/local/bin/gmd

# Copy the gm project directory for ignite evolve init
COPY --chown=gm:gm gm /home/gm/gm

# Copy initialization script
COPY --chown=gm:gm gm/integration-tests/scripts/init-gm.sh /home/gm/init-gm.sh
RUN chmod +x /home/gm/init-gm.sh

# Copy wait helper
COPY --chown=gm:gm gm/integration-tests/scripts/wait-for-da.sh /home/gm/wait-for-da.sh
RUN chmod +x /home/gm/wait-for-da.sh

# Switch to gm user
USER gm
WORKDIR /home/gm

# Set up environment
ENV GM_HOME=/home/gm/.gm
ENV CHAIN_ID=gm
ENV MONIKER=gm-local
ENV ATTESTER_MODE=false

# Expose ports
# RPC: 26757, P2P: 26756, gRPC: 9190, API: 1417
EXPOSE 26757 26756 9190 1417

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:26757/status || exit 1

# Initialize and start
CMD ["./init-gm.sh"]